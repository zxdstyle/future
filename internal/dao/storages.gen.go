// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"future-admin/internal/model"
)

func newStorage(db *gorm.DB, opts ...gen.DOOption) storage {
	_storage := storage{}

	_storage.storageDo.UseDB(db, opts...)
	_storage.storageDo.UseModel(&model.Storage{})

	tableName := _storage.storageDo.TableName()
	_storage.ALL = field.NewAsterisk(tableName)
	_storage.ID = field.NewUint64(tableName, "id")
	_storage.Name = field.NewString(tableName, "name")
	_storage.Driver = field.NewString(tableName, "driver")
	_storage.Addition = field.NewString(tableName, "addition")
	_storage.Remark = field.NewString(tableName, "remark")
	_storage.CreatedAt = field.NewField(tableName, "created_at")
	_storage.UpdatedAt = field.NewField(tableName, "updated_at")

	_storage.fillFieldMap()

	return _storage
}

type storage struct {
	storageDo

	ALL       field.Asterisk
	ID        field.Uint64
	Name      field.String
	Driver    field.String
	Addition  field.String
	Remark    field.String
	CreatedAt field.Field
	UpdatedAt field.Field

	fieldMap map[string]field.Expr
}

func (s storage) Table(newTableName string) *storage {
	s.storageDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s storage) As(alias string) *storage {
	s.storageDo.DO = *(s.storageDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *storage) updateTableName(table string) *storage {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Driver = field.NewString(table, "driver")
	s.Addition = field.NewString(table, "addition")
	s.Remark = field.NewString(table, "remark")
	s.CreatedAt = field.NewField(table, "created_at")
	s.UpdatedAt = field.NewField(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *storage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *storage) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["driver"] = s.Driver
	s.fieldMap["addition"] = s.Addition
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s storage) clone(db *gorm.DB) storage {
	s.storageDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s storage) replaceDB(db *gorm.DB) storage {
	s.storageDo.ReplaceDB(db)
	return s
}

type storageDo struct{ gen.DO }

type IStorageDo interface {
	gen.SubQuery
	Debug() IStorageDo
	WithContext(ctx context.Context) IStorageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStorageDo
	WriteDB() IStorageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStorageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStorageDo
	Not(conds ...gen.Condition) IStorageDo
	Or(conds ...gen.Condition) IStorageDo
	Select(conds ...field.Expr) IStorageDo
	Where(conds ...gen.Condition) IStorageDo
	Order(conds ...field.Expr) IStorageDo
	Distinct(cols ...field.Expr) IStorageDo
	Omit(cols ...field.Expr) IStorageDo
	Join(table schema.Tabler, on ...field.Expr) IStorageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStorageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStorageDo
	Group(cols ...field.Expr) IStorageDo
	Having(conds ...gen.Condition) IStorageDo
	Limit(limit int) IStorageDo
	Offset(offset int) IStorageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStorageDo
	Unscoped() IStorageDo
	Create(values ...*model.Storage) error
	CreateInBatches(values []*model.Storage, batchSize int) error
	Save(values ...*model.Storage) error
	First() (*model.Storage, error)
	Take() (*model.Storage, error)
	Last() (*model.Storage, error)
	Find() ([]*model.Storage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Storage, err error)
	FindInBatches(result *[]*model.Storage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Storage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStorageDo
	Assign(attrs ...field.AssignExpr) IStorageDo
	Joins(fields ...field.RelationField) IStorageDo
	Preload(fields ...field.RelationField) IStorageDo
	FirstOrInit() (*model.Storage, error)
	FirstOrCreate() (*model.Storage, error)
	FindByPage(offset int, limit int) (result []*model.Storage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStorageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s storageDo) Debug() IStorageDo {
	return s.withDO(s.DO.Debug())
}

func (s storageDo) WithContext(ctx context.Context) IStorageDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s storageDo) ReadDB() IStorageDo {
	return s.Clauses(dbresolver.Read)
}

func (s storageDo) WriteDB() IStorageDo {
	return s.Clauses(dbresolver.Write)
}

func (s storageDo) Session(config *gorm.Session) IStorageDo {
	return s.withDO(s.DO.Session(config))
}

func (s storageDo) Clauses(conds ...clause.Expression) IStorageDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s storageDo) Returning(value interface{}, columns ...string) IStorageDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s storageDo) Not(conds ...gen.Condition) IStorageDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s storageDo) Or(conds ...gen.Condition) IStorageDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s storageDo) Select(conds ...field.Expr) IStorageDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s storageDo) Where(conds ...gen.Condition) IStorageDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s storageDo) Order(conds ...field.Expr) IStorageDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s storageDo) Distinct(cols ...field.Expr) IStorageDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s storageDo) Omit(cols ...field.Expr) IStorageDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s storageDo) Join(table schema.Tabler, on ...field.Expr) IStorageDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s storageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStorageDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s storageDo) RightJoin(table schema.Tabler, on ...field.Expr) IStorageDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s storageDo) Group(cols ...field.Expr) IStorageDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s storageDo) Having(conds ...gen.Condition) IStorageDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s storageDo) Limit(limit int) IStorageDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s storageDo) Offset(offset int) IStorageDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s storageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStorageDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s storageDo) Unscoped() IStorageDo {
	return s.withDO(s.DO.Unscoped())
}

func (s storageDo) Create(values ...*model.Storage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s storageDo) CreateInBatches(values []*model.Storage, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s storageDo) Save(values ...*model.Storage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s storageDo) First() (*model.Storage, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Storage), nil
	}
}

func (s storageDo) Take() (*model.Storage, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Storage), nil
	}
}

func (s storageDo) Last() (*model.Storage, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Storage), nil
	}
}

func (s storageDo) Find() ([]*model.Storage, error) {
	result, err := s.DO.Find()
	return result.([]*model.Storage), err
}

func (s storageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Storage, err error) {
	buf := make([]*model.Storage, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s storageDo) FindInBatches(result *[]*model.Storage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s storageDo) Attrs(attrs ...field.AssignExpr) IStorageDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s storageDo) Assign(attrs ...field.AssignExpr) IStorageDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s storageDo) Joins(fields ...field.RelationField) IStorageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s storageDo) Preload(fields ...field.RelationField) IStorageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s storageDo) FirstOrInit() (*model.Storage, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Storage), nil
	}
}

func (s storageDo) FirstOrCreate() (*model.Storage, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Storage), nil
	}
}

func (s storageDo) FindByPage(offset int, limit int) (result []*model.Storage, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s storageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s storageDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s storageDo) Delete(models ...*model.Storage) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *storageDo) withDO(do gen.Dao) *storageDo {
	s.DO = *do.(*gen.DO)
	return s
}
